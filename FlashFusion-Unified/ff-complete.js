#!/usr/bin/env node

/**
 * FlashFusion CLI - Complete Implementation
 * Merges core and extended commands into unified CLI
 */

const core = require('./ff-cli.js');
const extended = require('./ff-cli-extended.js');

// Merge all commands
const allCommands = {
    ...core.commands,
    ...extended,
    
    // Additional helper commands
    'help:all': () => {
        console.log(`
${core.log ? '' : ''}FlashFusion Developer CLI v2.0.0 - Complete Command Reference

üì¶ CORE PROJECT SETUP
  ff:init                    ‚Üí Scaffold entire monorepo structure
  ff:install                 ‚Üí Install dependencies (pnpm or npm)
  ff:env                     ‚Üí Generate .env file from template
  ff:env:check               ‚Üí Verify env variable completeness
  ff:dev                     ‚Üí Run all dev services concurrently
  ff:build                   ‚Üí Compile all apps and packages
  ff:clean                   ‚Üí Remove .next, dist, node_modules
  ff:upgrade                 ‚Üí Check & upgrade all package versions

üöÄ DEPLOYMENT & HOSTING
  ff:vercel:link             ‚Üí Link Vercel project
  ff:vercel:deploy           ‚Üí Deploy to staging
  ff:vercel:prod             ‚Üí Deploy to production
  ff:vercel:logs             ‚Üí View build logs
  ff:deploy:edge             ‚Üí Deploy Supabase edge functions
  ff:deploy:all              ‚Üí Full stack deploy (web + edge + DB)

üîê SUPABASE DB + AUTH
  ff:supa:start              ‚Üí Run Supabase locally
  ff:supa:push               ‚Üí Push local changes to remote
  ff:supa:seed               ‚Üí Seed DB with dummy ideas
  ff:supa:rls:apply          ‚Üí Apply row-level security policies
  ff:supa:logs               ‚Üí View DB request logs
  ff:supa:backup             ‚Üí Export DB backup
  ff:supa:restore            ‚Üí Restore from backup
  ff:supa:auth:roles         ‚Üí Show auth roles

üß† MCP + AGENT ORCHESTRATION
  ff:agent:list              ‚Üí Show all registered agents
  ff:agent:roles             ‚Üí Print roles, purpose, routing
  ff:agent:call              ‚Üí Trigger agent manually
  ff:agent:log               ‚Üí View recent calls
  ff:agent:add               ‚Üí Add new agent to routing
  ff:agent:clear             ‚Üí Clear memory state
  ff:agent:ping              ‚Üí Health check all agents
  ff:agent:test              ‚Üí Test specific agent's logic
  ff:agent:trace             ‚Üí Trace call path with debug

üß™ VALIDATOR SUITE
  ff:validate:all            ‚Üí Run SaaS + Content + Ecom
  ff:validate:saas           ‚Üí SaaS validator only
  ff:validate:content        ‚Üí Content validator only
  ff:validate:ecom           ‚Üí Ecom validator only
  ff:validate:score          ‚Üí Show score breakdown
  ff:validate:compare        ‚Üí Compare 2 ideas
  ff:validate:trend          ‚Üí Run trend scraper module
  ff:validate:save           ‚Üí Persist verdict to DB
  ff:validate:export         ‚Üí Export verdict to PDF

üñºÔ∏è MOCKUP + CONTENT GENERATION
  ff:mockup:start            ‚Üí Upload image and generate merch
  ff:mockup:preview          ‚Üí Preview results
  ff:mockup:download         ‚Üí Download .zip of assets
  ff:mockup:publish          ‚Üí Push to connected store
  ff:content:script          ‚Üí Generate product ad copy
  ff:content:brandkit        ‚Üí Generate brand logo, color, font
  ff:content:tagline         ‚Üí Generate tagline based on idea
  ff:content:edit            ‚Üí Rewrite description
  ff:content:save            ‚Üí Store generated content

üõçÔ∏è STOREFRONT INTEGRATION
  ff:connect:shopify         ‚Üí OAuth connect Shopify store
  ff:connect:etsy            ‚Üí OAuth connect Etsy
  ff:connect:tiktok          ‚Üí OAuth TikTok Shop
  ff:connect:status          ‚Üí Check integration health
  ff:connect:sync            ‚Üí Sync product catalog
  ff:product:publish         ‚Üí Push product to selected store
  ff:product:update          ‚Üí Update product listing
  ff:product:retract         ‚Üí Unpublish product

üß∞ DEVELOPER TOOLS
  ff:ui:dev                  ‚Üí Run frontend UI only
  ff:ui:test                 ‚Üí Run component/unit tests
  ff:ui:lint                 ‚Üí Lint UI codebase
  ff:ui:format               ‚Üí Auto-format frontend files
  ff:ui:storybook            ‚Üí Open Storybook components
  ff:prompt:test             ‚Üí Try out prompt dropdowns
  ff:prompt:add              ‚Üí Add new generator preset

üìä ANALYTICS & FEEDBACK
  ff:log:validate            ‚Üí Show all past validation scores
  ff:log:agent               ‚Üí Show past agent activities
  ff:feedback:form           ‚Üí Launch feedback collector
  ff:feedback:list           ‚Üí View user feedback
  ff:insight:weekly          ‚Üí Summary of idea trends
  ff:insight:funnels         ‚Üí Conversion report
  ff:trend:report            ‚Üí Run trends + display UI

üíæ EXPORTING & DOCS
  ff:export:pdf              ‚Üí Export current view
  ff:export:zip              ‚Üí Download full mockup + copy
  ff:export:csv              ‚Üí Export ideas database
  ff:docs:generate           ‚Üí Build internal docs
  ff:docs:serve              ‚Üí Serve docs locally

üîÑ AUTOMATION & WORKFLOWS
  ff:auto:daily              ‚Üí Trigger daily validator runs
  ff:auto:clean              ‚Üí Cleanup unused ideas/files
  ff:auto:share              ‚Üí Post best ideas to GPTs
  ff:auto:backup             ‚Üí Schedule DB backups
  ff:auto:report             ‚Üí Email insights to owner

üß† BONUS FEATURES
  ff:demo:mode               ‚Üí Fake data auto-mode for pitching/demoing
  ff:cloner:create           ‚Üí Turn validated idea into standalone microapp repo
  ff:gpt:export              ‚Üí Generate GPT spec from idea
  ff:seo:gen                 ‚Üí AI SEO meta generator for all products
  ff:embed:widget            ‚Üí Generate embeddable FlashFusion widget
        `);
    },

    'status': () => {
        console.log(`
üöÄ FlashFusion System Status

üìä Core Services:
  ‚úÖ Main Server (Port 8080)
  ‚úÖ Lyra Dashboard (Port 3000)  
  ‚úÖ MCP Server (Port 3001)
  
üîó Integrations:
  üü¢ Supabase Connected
  üü¢ Anthropic Claude API
  üü° OpenAI API (Configured)
  
ü§ñ Agents Status:
  ‚úÖ Coordinator Active
  ‚úÖ Creator Active  
  ‚úÖ Researcher Active
  ‚úÖ Optimizer Active
  ‚úÖ Analyzer Active
  ‚úÖ Automator Active

üìà System Health: Excellent
üîß Last Updated: ${new Date().toLocaleString()}
        `);
    },

    'quickstart': () => {
        console.log(`
üöÄ FlashFusion Quick Start Guide

1Ô∏è‚É£ Initialize Project:
   ff:init

2Ô∏è‚É£ Install Dependencies:
   ff:install

3Ô∏è‚É£ Configure Environment:
   ff:env
   # Edit .env with your API keys

4Ô∏è‚É£ Start Development:
   ff:dev

5Ô∏è‚É£ Open in Browser:
   ‚Ä¢ Main Dashboard: http://localhost:8080
   ‚Ä¢ Lyra Agent: http://localhost:3000

üéØ Ready to build? Try:
   ff:validate:all    # Test the validator
   ff:agent:ping      # Check agent health
   ff:mockup:start    # Generate content

üí° Need help? Run: ff:help:all
        `);
    }
};

// Main execution logic
async function main() {
    const args = process.argv.slice(2);
    const command = args[0];

    if (!command || command === 'help') {
        allCommands.help();
        return;
    }

    if (command === 'quickstart') {
        allCommands.quickstart();
        return;
    }

    if (command === 'status') {
        allCommands.status(); 
        return;
    }

    // Remove 'ff:' prefix if present
    const cleanCommand = command.replace(/^ff:/, '');

    if (allCommands[cleanCommand]) {
        try {
            await allCommands[cleanCommand]();
        } catch (error) {
            console.error(`‚ùå Command failed: ${error.message}`);
            process.exit(1);
        }
    } else {
        console.error(`‚ùå Unknown command: ${command}`);
        console.log('üí° Run "ff:help:all" to see all available commands');
        process.exit(1);
    }
}

// Make CLI executable
if (require.main === module) {
    main().catch(error => {
        console.error(`‚ùå ${error.message}`);
        process.exit(1);
    });
}

module.exports = allCommands;