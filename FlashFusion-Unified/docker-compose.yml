# =====================================================
# FlashFusion Unified - Docker Compose Configuration
# Production-ready multi-service deployment
# =====================================================

version: '3.8'

services:
  # ===================================================
  # FlashFusion Main Application
  # ===================================================
  flashfusion:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NODE_ENV=production
    image: flashfusion/unified:latest
    container_name: flashfusion-app
    restart: unless-stopped
    ports:
      - "3333:3333"
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3333
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_URL=${POSTGRES_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - app_data:/app/src/orchestration/data
      - app_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - flashfusion-network
    healthcheck:
      test: ["CMD", "node", "scripts/docker-health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================================
  # PostgreSQL Database
  # ===================================================
  postgres:
    image: postgres:15-alpine
    container_name: flashfusion-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-flashfusion}
      - POSTGRES_USER=${POSTGRES_USER:-flashfusion}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-flashfusion_secret}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
    ports:
      - "5432:5432"
    networks:
      - flashfusion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flashfusion} -d ${POSTGRES_DB:-flashfusion}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================================
  # Redis Cache & Queue
  # ===================================================
  redis:
    image: redis:7-alpine
    container_name: flashfusion-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - flashfusion-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ===================================================
  # Lyra Dashboard (Development Agent)
  # ===================================================
  lyra-dashboard:
    build:
      context: ./agents/lyra/dashboard
      dockerfile: Dockerfile
    image: flashfusion/lyra-dashboard:latest
    container_name: flashfusion-lyra
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://flashfusion:3333
    depends_on:
      - flashfusion
    networks:
      - flashfusion-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================
  # Nginx Reverse Proxy
  # ===================================================
  nginx:
    image: nginx:alpine
    container_name: flashfusion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - flashfusion
      - lyra-dashboard
    networks:
      - flashfusion-network

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local

# =====================================================
# Networks
# =====================================================
networks:
  flashfusion-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16