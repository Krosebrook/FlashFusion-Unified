Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
    container.innerHTML = agents.map(agent => `
        <div class="agent-card" onclick="showAgentDetails('${agent.id}')">
            <div class="agent-header">
                <h3>${agent.name}</h3>
                <div class="status">
                    <div class="status-dot ${agent.status}"></div>
                    <span>${agent.status.charAt(0).toUpperCase() + agent.status.slice(1)}</span>
                </div>
            </div>
            
            <div class="agent-info">
                <p><strong>Role:</strong> ${agent.role}</p>
                <p><strong>Priority:</strong> ${agent.priority}</p>
                ${agent.currentWorkflow ? `<p><strong>Current Workflow:</strong> ${agent.currentWorkflow}</p>` : ''}
            </div>
            
            <div class="agent-capabilities">
                <strong>Capabilities:</strong>
                <div class="capabilities-tags">
                    ${agent.capabilities.map(cap => `<span class="capability-tag">${cap}</span>`).join('')}
                </div>
            </div>
            
            <div class="agent-actions">
                <button onclick="event.stopPropagation(); editAgent('${agent.id}')" class="btn-secondary">‚úèÔ∏è Edit</button>
                <button onclick="event.stopPropagation(); chatWithAgent('${agent.id}')" class="btn-primary">üí¨ Chat</button>
                <button onclick="event.stopPropagation(); toggleAgent('${agent.id}')" class="btn-secondary">
                    ${agent.status === 'active' ? '‚è∏Ô∏è Pause' : '‚ñ∂Ô∏è Activate'}
                </button>
            </div>
        </div>
    `).join('');
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
    body.innerHTML = `
        <div class="agent-details">
            <div class="detail-section">
                <h4>Basic Information</h4>
                <p><strong>ID:</strong> ${agent.id}</p>
                <p><strong>Name:</strong> ${agent.name}</p>
                <p><strong>Status:</strong> <span class="status-${agent.status}">${agent.status}</span></p>
                <p><strong>Priority:</strong> ${agent.priority}</p>
            </div>
            
            <div class="detail-section">
                <h4>Role & Capabilities</h4>
                <p><strong>Role:</strong> ${agent.role}</p>
                <p><strong>Capabilities:</strong></p>
                <ul>
                    ${agent.capabilities.map(cap => `<li>${cap.replace(/_/g, ' ').toUpperCase()}</li>`).join('')}
                </ul>
            </div>
            
            ${agent.currentWorkflow ? `
                <div class="detail-section">
                    <h4>Current Activity</h4>
                    <p><strong>Workflow:</strong> ${agent.currentWorkflow}</p>
                    <p><strong>Task:</strong> ${agent.currentTask || 'Not specified'}</p>
                </div>
            ` : ''}
            
            <div class="detail-section">
                <h4>Performance Metrics</h4>
                <p><strong>Total Tasks Completed:</strong> ${Math.floor(Math.random() * 100) + 1}</p>
                <p><strong>Success Rate:</strong> ${(Math.random() * 20 + 80).toFixed(1)}%</p>
                <p><strong>Average Response Time:</strong> ${(Math.random() * 2 + 0.5).toFixed(2)}s</p>
            </div>
            
            <div class="detail-actions">
                <button onclick="editAgent('${agent.id}')" class="btn-primary">‚úèÔ∏è Edit Agent</button>
                <button onclick="chatWithAgent('${agent.id}')" class="btn-primary">üí¨ Chat</button>
                <button onclick="cloneAgent('${agent.id}')" class="btn-secondary">üìã Clone</button>
                <button onclick="exportAgent('${agent.id}')" class="btn-secondary">üì§ Export</button>
            </div>
        </div>
    `;
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
    document.getElementById('chat-history').innerHTML = `
        <div class="chat-message agent">
            <strong>${agent.name}:</strong> Hello! I'm ${agent.name}. How can I assist you today?
        </div>
    `;
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
    chatHistory.innerHTML += `
        <div class="chat-message user">
            <strong>You:</strong> ${message}
        </div>
    `;
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
            chatHistory.innerHTML += `
                <div class="chat-message agent">
                    <strong>${currentAgent.name}:</strong> ${data.data.response}
                </div>
            `;
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
            chatHistory.innerHTML += `
                <div class="chat-message agent error">
                    <strong>Error:</strong> ${data.error}
                </div>
            `;
Detected potential vulnerability in client/dist/agents.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/agents.js
        chatHistory.innerHTML += `
            <div class="chat-message agent error">
                <strong>Network Error:</strong> ${error.message}
            </div>
        `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
    container.innerHTML = snippetsToShow.map((snippet, index) => `
        <div class="snippet-card" onclick="loadSnippet(${index}, '${category}')">
            <h4>${snippet.title}</h4>
            <p>${snippet.description}</p>
            <div class="snippet-preview">
                <code>${snippet.code.substring(0, 100)}...</code>
            </div>
            <div class="snippet-actions">
                <button onclick="event.stopPropagation(); copySnippet(${index}, '${category}')" class="btn-secondary">üìã Copy</button>
                <button onclick="event.stopPropagation(); editSnippet(${index}, '${category}')" class="btn-primary">‚úèÔ∏è Edit</button>
            </div>
        </div>
    `).join('');
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
        output.innerHTML = `
            <div class="output-header">
                <strong>Output (${language}):</strong>
                <span class="execution-time">${new Date().toLocaleTimeString()}</span>
            </div>
            <pre class="output-content">${result}</pre>
        `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
        output.innerHTML = `
            <div class="error">
                <strong>Execution Error:</strong>
                <pre>${error.message}</pre>
            </div>
        `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                <h3>Share Code</h3>
                <p>Copy this link to share your code:</p>
                <textarea readonly style="width: 100%; height: 100px;">${shareableLink}</textarea>
                <button onclick="navigator.clipboard.writeText('${shareableLink}'); showSuccess('Link copied!');" class="btn-primary">Copy Link</button>
            </div>
        `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
    terminal.innerHTML += `<div class="terminal-line terminal-command">flashfusion@unified:~$ ${command}</div>`;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
        terminal.innerHTML += `<div class="terminal-line terminal-output">${output}</div>`;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
    chatHistory.innerHTML += `
        <div class="ai-message user">
            <strong>You:</strong> ${prompt}
        </div>
    `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
    chatHistory.innerHTML += `
        <div class="ai-message assistant loading">
            <strong>${selectedModel.charAt(0).toUpperCase() + selectedModel.slice(1)} Agent:</strong> 
            <span class="thinking">Thinking...</span>
        </div>
    `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
            chatHistory.innerHTML += `
                <div class="ai-message assistant">
                    <strong>${selectedModel.charAt(0).toUpperCase() + selectedModel.slice(1)} Agent:</strong> 
                    ${formatAIResponse(data.data.response)}
                </div>
            `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
            chatHistory.innerHTML += `
                <div class="ai-message assistant error">
                    <strong>Error:</strong> ${data.error}
                </div>
            `;
Detected potential vulnerability in client/dist/dashboard-interactive.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/dashboard-interactive.js
        chatHistory.innerHTML += `
            <div class="ai-message assistant error">
                <strong>Network Error:</strong> ${error.message}
            </div>
        `;
Detected potential vulnerability in client/dist/integrations.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/integrations.js
    container.innerHTML = filtered.map(integration => `
        <div class="integration-card ${integration.status}" onclick="showIntegrationDetails('${integration.id}')">
            <div class="integration-header">
                <div class="integration-icon">${integration.icon}</div>
                <div class="integration-info">
                    <h3>${integration.name}</h3>
                    <div class="status">
                        <div class="status-dot ${integration.status}"></div>
                        <span>${integration.status.charAt(0).toUpperCase() + integration.status.slice(1)}</span>
                    </div>
                </div>
            </div>
            
            <p>${integration.description}</p>
            
            <div class="integration-details">
                <div class="detail-item">
                    <strong>Category:</strong> ${integration.category.toUpperCase()}
                </div>
                <div class="detail-item">
                    <strong>Cost:</strong> ${integration.cost}
                </div>
            </div>
            
            <div class="integration-actions">
                ${integration.status === 'connected' ? 
                    `<button onclick="event.stopPropagation(); disconnectIntegration('${integration.id}')" class="btn-danger">üîå Disconnect</button>
                     <button onclick="event.stopPropagation(); testIntegration('${integration.id}')" class="btn-secondary">üß™ Test</button>` :
                    `<button onclick="event.stopPropagation(); connectIntegration('${integration.id}')" class="btn-primary">üîó Connect</button>`
                }
                <button onclick="event.stopPropagation(); configureIntegration('${integration.id}')" class="btn-secondary">‚öôÔ∏è Configure</button>
            </div>
        </div>
    `).join('');
Detected potential vulnerability in client/dist/integrations.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/integrations.js
    body.innerHTML = `
        <div class="integration-config">
            <div class="config-section">
                <h4>Connection Status</h4>
                <div class="status-indicator ${integration.status}">
                    <div class="status-dot ${integration.status}"></div>
                    <span>${integration.status.charAt(0).toUpperCase() + integration.status.slice(1)}</span>
                </div>
            </div>
            
            <div class="config-section">
                <h4>Configuration</h4>
                <form class="integration-form">
                    <div class="form-group">
                        <label>API Key:</label>
                        <input type="password" placeholder="Enter your API key..." value="${integration.status === 'connected' ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : ''}">
                    </div>
                    <div class="form-group">
                        <label>Endpoint URL:</label>
                        <input type="url" placeholder="https://api.${integration.id}.com" value="https://api.${integration.id}.com">
                    </div>
                    <div class="form-group">
                        <label>Rate Limit (requests/minute):</label>
                        <input type="number" value="60" min="1" max="1000">
                    </div>
                    <div class="form-group">
                        <label>Enable Webhooks:</label>
                        <input type="checkbox" ${integration.status === 'connected' ? 'checked' : ''}>
                    </div>
                </form>
            </div>
            
            <div class="config-section">
                <h4>Usage Statistics</h4>
                <div class="usage-stats">
                    <div class="stat-item">
                        <strong>Requests Today:</strong> ${Math.floor(Math.random() * 1000)}
                    </div>
                    <div class="stat-item">
                        <strong>Success Rate:</strong> ${(Math.random() * 10 + 90).toFixed(1)}%
                    </div>
                    <div class="stat-item">
                        <strong>Avg Response Time:</strong> ${(Math.random() * 500 + 100).toFixed(0)}ms
                    </div>
                    <div class="stat-item">
                        <strong>Monthly Cost:</strong> $${(Math.random() * 100 + 10).toFixed(2)}
                    </div>
                </div>
            </div>
            
            <div class="config-section">
                <h4>Available Features</h4>
                <div class="features-list">
                    ${getIntegrationFeatures(integration).map(feature => 
                        `<div class="feature-item">
                            <input type="checkbox" checked>
                            <span>${feature}</span>
                        </div>`
                    ).join('')}
                </div>
            </div>
            
            <div class="config-actions">
                <button class="btn-primary" onclick="saveIntegrationConfig('${id}')">üíæ Save Configuration</button>
                <button class="btn-secondary" onclick="testIntegration('${id}')">üß™ Test Connection</button>
                <button class="btn-secondary" onclick="viewIntegrationLogs('${id}')">üìã View Logs</button>
                ${integration.status === 'connected' ? 
                    `<button class="btn-danger" onclick="disconnectIntegration('${id}')">üîå Disconnect</button>` :
                    `<button class="btn-primary" onclick="connectIntegration('${id}')">üîó Connect</button>`
                }
            </div>
        </div>
    `;
Detected potential vulnerability in client/dist/integrations.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/integrations.js
    container.innerHTML = filtered.map(integration => `
        <div class="integration-card ${integration.status}" onclick="showIntegrationDetails('${integration.id}')">
            <!-- Same card HTML as above -->
        </div>
    `).join('');
Detected potential vulnerability in client/dist/workflows.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/workflows.js
    container.innerHTML = workflowTemplates.map(template => `
        <div class="workflow-card template" onclick="showTemplateDetails('${template.id}')">
            <div class="workflow-header">
                <h3>${template.icon} ${template.name}</h3>
                <span class="complexity-badge ${template.complexity}">${template.complexity}</span>
            </div>
            <p>${template.description}</p>
            <div class="workflow-stats">
                <span>‚è±Ô∏è ${template.estimatedDuration}</span>
                <span>üìã ${template.steps.length} steps</span>
            </div>
            <div class="workflow-actions">
                <button onclick="event.stopPropagation(); createFromTemplate('${template.id}')" class="btn-primary">üöÄ Create</button>
                <button onclick="event.stopPropagation(); previewTemplate('${template.id}')" class="btn-secondary">üëÅÔ∏è Preview</button>
            </div>
        </div>
    `).join('');
Detected potential vulnerability in client/dist/workflows.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/workflows.js
    document.getElementById('active-container').innerHTML = activeWorkflows.length ? 
        activeWorkflows.map(createWorkflowCard).join('') :
        '<div class="loading">No active workflows</div>';
Detected potential vulnerability in client/dist/workflows.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/workflows.js
    document.getElementById('completed-container').innerHTML = completedWorkflows.length ?
        completedWorkflows.map(createWorkflowCard).join('') :
        '<div class="loading">No completed workflows</div>';
Detected potential vulnerability in client/dist/workflows.js
XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities. Replace with safe DOM methods: Use createElement() + appendChild() + textContent for dynamic content. Avoid use innerHTML with user data: Even escaped data can be risky. If HTML injection is absolutely necessary: Sanitize with DOMPurify library first.
client/dist/workflows.js
    container.innerHTML = hierarchyOrder.map((item, index) => `
        <div class="sortable-item" draggable="true" data-id="${item.id}">
            <div class="hierarchy-item">
                <span class="drag-handle">‚ãÆ‚ãÆ</span>
                <span class="priority-number">${index + 1}</span>
                <span class="workflow-icon">${item.icon}</span>
                <span class="workflow-name">${item.name}</span>
                <span class="complexity ${item.complexity}">${item.complexity}</span>
                <div class="hierarchy-actions">
                    <button onclick="moveUp(${index})" ${index === 0 ? 'disabled' : ''}>‚Üë</button>
                    <button onclick="moveDown(${index})" ${index === hierarchyOrder.length - 1 ? 'disabled' : ''}>‚Üì</button>
                </div>
            </div>
        </div>
    `).join('');
Detected potential vulnerability in scripts/key-rotation.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
scripts/key-rotation.js
                validator: (key) => key.startsWith('sk-ant-'),
Detected potential vulnerability in scripts_legacy/test-ai-integration.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
scripts_legacy/test-ai-integration.js
  log('cyan', `  Key Format: ${OPENAI_API_KEY.startsWith('sk-proj') ? 'Project Key ‚úÖ' : 'Standard Key'}`);
Detected potential vulnerability in scripts_legacy/test-anthropic-ai.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
scripts_legacy/test-anthropic-ai.js
  log('cyan', `  Key Format: ${ANTHROPIC_API_KEY.startsWith('sk-ant') ? 'Anthropic Key ‚úÖ' : 'Unknown Format'}`);
Detected potential vulnerability in scripts_legacy/validate_env.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
scripts_legacy/validate_env.js
  const prefix = process.env.ANTHROPIC_KEY_PREFIX || 'sk-ant-';
Detected potential vulnerability in src/server/routes/agents.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
src/server/routes/agents.js
    if (!validateApiKey(openRouterKey, 'sk-or-')) {
Detected potential vulnerability in src/server/services/ai.js
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
src/server/services/ai.js
    const anthropicPrefix = process.env.ANTHROPIC_KEY_PREFIX || 'sk-ant-';
Detected potential vulnerability in src/server/services/apiKeyService.ts
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
src/server/services/apiKeyService.ts
  ANTHROPIC_PREFIX: process.env.ANTHROPIC_KEY_PREFIX || 'sk-ant-',
Detected potential vulnerability in src/server/services/apiKeyService.ts
A gitleaks Openai API Key detected. Avoid hardcoding credentials directly in connection strings as this creates security risks. Instead, use environment variables to store and access credentials at runtime. If you need the actual credential values to make this work properly, ask me to provide them through Replit's secret system.
src/server/services/apiKeyService.ts
      minLength: API_KEY_PATTERNS.MIN_KEY_LENGTH + 4, // sk-ant- is longer
Detected potential vulnerability in src/services/mcpService.js
Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
src/services/mcpService.js
            const process = spawn(command, sanitizedArgs, {
This security scan is powered by Semgrep Community Edition.